(if "foo" "truthy" "falsey")
(if 0 "truthy" "falsey")
(if [] "true" "false")
(if false "true" "false")
(if nil "true" "false")
(boolean "foo")
(boolean nil)
(def bool
  (fn [x] (if (= x nil) false true)))
(bool "false")
or
(or true false)
(def bool (fn [x] (if (or (= x false) (= x nil)) false true))
)
(bool "foo")
(bool nil)
(bool (+ 2 3))
(bool true)
(bool false)
(= "foo" "foo")
(= "foo" "bar")
(== 42 42)
(== 5.0 5)
(= 5.0 5)
(< 1 2)
(> 1 2)
(<= 52 2)
(= 1 1 1)
(= 1 1 2)
(< 1 2 3 4)
(< 1 2 3 1)
(def teen? (fn [age] (<= 13 age 19)))
(teen? 12)
(teen? 13)
(teen? 15)
(teen? 19)
(teen? 20)
(teen? 27)
(defn sign [x]
  (if (< x 0)
    "-"
    "+"))
(sign 2)
(sign -2)
(sign 0)
(if true
  42
  (/ 1 0)
)
(defn abs [n]
  (if (< n 0)
    (- n)
    n))
(abs -2)
(abs 42)
(defn divides? [divisor n]
  (if (= 0 (mod n divisor))
    true
    false))
(divides? 2 4)
(divides? 4 2)
(divides? 5 10)
(divides? 2 5)
(defn divides? [divisor n]
  (= 0 (mod n divisor)))
(divides? 2 4)
(divides? 4 2)
(divides? 5 10)
(divides? 2 5)
(defn super-sign [number]
  (cond
    (neg? number) "negative"
    (pos? number) "positive"
    :else         "zero"))
(super-sign 13)
(super-sign 0)
(super-sign -5)
(defn fizzbuzz [n]
  (cond
    (divides? 15 n) "gotcha!"
    (divides?  3 n) "fizz"
    (divides?  5 n) "buzz"
    :else           ""))
(fizzbuzz 2)  ;=> ""
(fizzbuzz 45) ;=> "gotcha!"
(fizzbuzz 48) ;=> "fizz"
(fizzbuzz 70) ;=> "buzz"
(defn generic-doublificate [n]
  (cond
    (number? n) (* n 2)
    (empty? n) nil
    (list? n) (* 2 (count n))
    (vector? n) (* 2 (count n))
    :else true))
(generic-doublificate 1)        ;=> 2
(generic-doublificate [1 2])    ;=> 4
(generic-doublificate '(65 21)) ;=> 4
(generic-doublificate {})       ;=> nil
(generic-doublificate [])       ;=> nil
(generic-doublificate {:a 1})   ;=> true
(and ture true)
(and true ture)
(and true true)
(and true false)
(or true false)
(or false false)
(not true)
(not false)
(and true true true)
(and true true false)
(and)
(or false false false)
(or false false true)
(or)
(and "foo" "bar")
(and "foo" false)
(and 10 nil)
(or "foo" false)
(or 42 true)
(defn not-teen? [age] (not (teen? age)))
(not-teen? 13) ;=> false
(not-teen? 25) ;=> true
(not-teen? 12) ;=> true
(not-teen? 19) ;=> false
(not-teen? 20) ;=> true
(defn leap-year? [year]
  (cond
    (and (divides? 4 n) (not (divides? 100 n))) true
    (divides? 400) true
    :else false
))
(defn leap-year? [year]
  (cond
    (and (divides? 4 year) (not (divides? 100 year))) true
    (divides? 400) true
    :else false))
(leap-year? 100) ;=> false
(leap-year? 200) ;=> false
(leap-year? 400) ;=> true
(leap-year? 12)  ;=> true
(leap-year? 20)  ;=> true
(leap-year? 15)  ;=> false
*e
(.printStackTrace e)
(.printStackTrace *e)
